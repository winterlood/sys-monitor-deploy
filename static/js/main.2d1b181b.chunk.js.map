{"version":3,"sources":["component/Index/Index.js","component/Header/Header.js","component/test/One.js","component/test/Two.js","util/time.js","component/PcItem/PcItem.js","component/ScrollButton/ScrollButton.js","component/ClickableText/ClickableText.js","component/TotalPc/TotalPc.js","component/Login/Login.js","component/AuthRoute/AutheRoute.js","MyRouter.js","App.js","serviceWorker.js","index.js"],"names":["Index","isPolling","handlePolling","useState","check","setCheck","useEffect","Fragment","className","src","to","FormControlLabel","checked","onChange","control","Switch","color","label","labelPlacement","HideOnScroll","props","children","window","trigger","useScrollTrigger","target","undefined","Slide","appear","direction","in","Header","CssBaseline","AppBar","style","backgroundColor","height","opacity","Toolbar","One","Two","getFilteredDate","nowTime","year","getFullYear","month","String","getMonth","day","getDate","hour","getHours","minute","getMinutes","PcItem","currentDate","Date","now","getSeconds","state","isOpen","nowOffButtonRunning","nowDelayButtonRunning","updateTime","nextProps","prevState","nextIsOpen","console","log","this","setState","id","powerStatus","ramData","cpuData","startTime","endTime","Offlight","Onlight","Powerlight","toggle","pcOffEvent","today","sendTime","axios","post","params","then","reload","pcDelay","setMinutes","plus30minute","get","response","data","catch","error","OffButtonState","Spinner","size","Button","onClick","DelayButtonState","ButtonState","GetRamNotice","GetCpuNotice","getFilteredTime","time","nowSplitedTime","split","length","CollapseChild","Card","CardBody","Progress","value","Row","Collapse","Component","ScrollButton","intervalId","pageYOffset","clearInterval","scroll","scrollStepInPx","setInterval","scrollStep","bind","delayInMs","title","scrollToTop","React","smallButtonStyle","ClickableText","text","smallPaddingStyle","padding","TotalPc","pcs","setPcs","getPcs","sortedResponse","sort","a","b","map","key","intervals","RenderPollingState","Alert","Container","Login","saveLoginState","authenticated","location","setId","pw","setPw","from","pathname","TextField","variant","AuthRoute","component","render","rest","MyRouter","user","path","App","isPollin","sessionUser","sessionStorage","getItem","sessionAuth","basename","email","setItem","logout","clear","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2d1b181b.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport { Link } from 'react-router-dom';\nimport './Index.css';\nimport Switch from '@material-ui/core/Switch';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nconst Index = ({isPolling,handlePolling}) => {\n \n    const [check,setCheck] = useState(isPolling);\n    useEffect(()=>{\n        setCheck(isPolling);\n    },[isPolling])\n    return (\n        <React.Fragment>\n            <div className=\"header-logo-box\">\n                <img src=\"/img/image_logo.png\"></img>\n            </div>\n            <div className=\"header-link-box\">\n                <Link to=\"/total\">TOTAL</Link>\n            </div>\n            <div className=\"header-link-box\">\n                <Link to=\"/two\">CLASS</Link>\n            </div>\n            <div>\n            <FormControlLabel\n            checked={check}\n            onChange={handlePolling}\n            control={<Switch color=\"primary\" />}\n            label=\"POLLING\"\n            labelPlacement=\"start\"\n        />\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default Index;","import React  from 'react';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport useScrollTrigger from '@material-ui/core/useScrollTrigger';\nimport Box from '@material-ui/core/Box';\nimport Container from '@material-ui/core/Container';\nimport Slide from '@material-ui/core/Slide';\nimport Index from '../Index/Index';\nfunction HideOnScroll(props) {\n    const { children, window } = props;\n    // Note that you normally won't need to set the window ref as useScrollTrigger\n    // will default to window.\n    // This is only being set here because the demo is in an iframe.\n    const trigger = useScrollTrigger({ target: window ? window() : undefined });\n  \n    return (\n      <Slide appear={false} direction=\"down\" in={!trigger}>\n        {children}\n      </Slide>\n    );\n  }\n  \n  HideOnScroll.propTypes = {\n    children: PropTypes.element.isRequired,\n    /**\n     * Injected by the documentation to work in an iframe.\n     * You won't need it on your project.\n     */\n    window: PropTypes.func,\n  };\n  \nconst Header = (props) => {\n    const style={\n        backgroundColor:\"black\",\n        height:\"50px\",\n        opacity:\"80%\"\n    }\n    const {isPolling,handlePolling} = props;\n\n    return (\n        <React.Fragment>\n          <CssBaseline />\n          <HideOnScroll {...props}>\n            <AppBar style={style}>\n              <Toolbar >\n                <Index\n                 isPolling={isPolling} handlePolling={handlePolling}\n                ></Index>\n              </Toolbar>\n            </AppBar>\n          </HideOnScroll>\n        </React.Fragment>\n      );\n}\n\nexport default Header;","import React from 'react';\nconst One = ({children}) => {\n    return(\n        <React.Fragment>\n      {children}\n\n        </React.Fragment>\n    );\n}\n\nexport default One;","import React from 'react';\nconst Two = () => {\n    return(\n        <h1>Two</h1>\n    );\n}\n\nexport default Two;","export const getFilteredDate = (nowTime) => {\n    let year = nowTime.getFullYear(); // 년도\n\n    let month = new String(nowTime.getMonth() + 1);  // 월\n    month = month >= 10? month : '0'+month;\n\n    let day = new String(nowTime.getDate());  // 일\n    day = day >= 10? day :'0'+day;\n\n    let hour = new String(nowTime.getHours());  // 시간\n    hour = hour >=10? hour : '0' + hour;\n\n    let minute = new String(nowTime.getMinutes());\n    minute = minute >=10? minute : '0' + minute;\n\n    var sendTime = \n    year + \"-\" +\n    month  + \"-\" +\n    day  + \"-\" +\n    hour  + \"-\" +\n    minute;\n\n    return sendTime;\n};\n\nexport const plus30minute = () => {\n    let today = new Date();   \n    today.setMinutes(today.getMinutes()+30);\n    return today;\n};\n\n","import React, { Component } from 'react';\nimport './PcItem.css';\nimport { Spinner, Alert, Progress, Row, Collapse, Button, CardBody, Card } from 'reactstrap';\nimport { CardHeader } from '@material-ui/core';\nimport axios from 'axios';\nimport { getFilteredDate, plus30minute } from '../../util/time'\nclass PcItem extends Component {\n    //({handleOffPc,handleDelayPc, id, powerStatus, ramData, cpuData, endTime })\n\n    constructor(props) {\n        super(props);\n        var currentDate = new Date();\n        var now = currentDate.getHours() + \"시\"\n        now += currentDate.getMinutes() + \"분\";\n        now += currentDate.getSeconds() + \"초\";\n        this.state = {\n            ...props,\n            isOpen: false,\n            nowOffButtonRunning: false,\n            nowDelayButtonRunning : false,\n            updateTime: now\n        }\n    }\n\n    componentWillReceiveProps(nextProps,prevState) {\n        var currentDate = new Date();\n        var now = currentDate.getHours() + \"시\"\n        now += currentDate.getMinutes() + \"분\";\n        now += currentDate.getSeconds() + \"초\";\n        var nextIsOpen = false;\n        console.log(this.state.isOpen);\n        if(this.state.isOpen){\n            nextIsOpen = true;\n        }\n        this.setState({\n            ...nextProps,\n            isOpen: nextIsOpen,\n            nowOffButtonRunning: false,\n            nowDelayButtonRunning : false,\n            updateTime: now\n        })\n    }\n\n    render() {\n        const { id, powerStatus, ramData, cpuData, startTime, endTime, \n            isOpen, \n            nowOffButtonRunning,\n            nowDelayButtonRunning,\n            updateTime } = this.state;\n        console.log(\"render This!\" + id);\n        const Offlight = () => {\n            return <div className=\"off-light\"></div>\n        }\n        const Onlight = () => {\n            return <div className=\"on-light\"></div>\n        }\n        const Powerlight = () => {\n            if (powerStatus === \"ON\" || powerStatus === \"On\") {\n                return <Onlight></Onlight>\n            }\n            else return <Offlight></Offlight>\n        }\n\n        const toggle = () => {\n            this.setState({\n                isOpen: !isOpen\n            })\n        }\n\n        const pcOffEvent = () => {\n            this.setState({\n                nowOffButtonRunning: true\n            })\n            let today = new Date();\n            var sendTime = getFilteredDate(today);\n            axios.post('/mobile/pc/' + id + '/power/' + sendTime, {\n                params: {\n                    endTime: sendTime,\n                    powerStatus :\"OFF\"\n                }\n            })\n                .then(() => {\n                    reload();\n                });\n        }\n\n        const pcDelay =() =>{\n            this.setState({\n                nowDelayButtonRunning: true\n            })\n            let today = new Date();\n            var sendTime = getFilteredDate(plus30minute());\n            axios.post('/mobile/pc/' + id + '/power/' + sendTime, {\n                params: {\n                    endTime: sendTime,\n                }\n            })\n                .then(() => {\n                    reload();\n                });\n        }\n\n        const reload = () => {\n            var currentDate = new Date();\n            var now = currentDate.getHours() + \"시\"\n            now += currentDate.getMinutes() + \"분\";\n            now += currentDate.getSeconds() + \"초\";\n            axios.get(\"pc/\" + id)\n                .then((response) => {\n                    console.log(\"Reload Success!\");\n                    console.log(response);\n                    this.setState({\n                        ...response.data,\n                        nowOffButtonRunning: false,\n                        nowDelayButtonRunning : false,\n                        updateTime: now\n                    });\n                })\n                .catch(function (error) {\n                    console.log(error);\n                });\n        }\n\n        const OffButtonState = () => {\n            if (nowOffButtonRunning) {\n                return (<div>현재 서버와 통신중입니다....<Spinner size=\"sm\" color=\"secondary\" /></div>);\n            }\n            else {\n                return (\n                    <Button color=\"danger\" id=\"offButton\" onClick={() => pcOffEvent(id)}>종료하기</Button>\n                );\n            }\n        }\n\n        const DelayButtonState = () =>{\n            if(nowDelayButtonRunning){\n                return (<div>현재 서버와 통신중입니다....<Spinner size=\"sm\" color=\"secondary\" /></div>);\n            }\n            else {\n                return (\n                    <Button color=\"primary\" id=\"offButton\" onClick={() => pcDelay(id)}>30분 연장하기</Button>\n                );\n            }\n        }\n\n        const ButtonState = () =>{\n            if(nowDelayButtonRunning || nowOffButtonRunning){\n                return(\n                    <div>현재 서버와 통신중입니다....<Spinner size=\"sm\" color=\"secondary\" /></div>\n                );\n            }\n            else{\n                return(\n                    <React.Fragment>\n                    <div className=\"collapse-item-wrapper\">\n                    <DelayButtonState/>\n                    </div>\n                    <div className=\"collapse-item-wrapper\">\n                    <OffButtonState />\n                    </div>\n                    </React.Fragment>\n                );\n            }\n        }\n\n        const GetRamNotice = () => {\n            if (ramData >= 90) {\n                return (\n                    <div className=\"usage-over-90\">\n                        <p >PC가 뜨겁습니다!</p>\n                    </div>\n                );\n            }\n            else if (ramData >= 70) {\n                return (\n                    <div className=\"usage-over-70\">\n                        <p>누군가가 열심히 작업하고 있습니다</p>\n                    </div>\n                );\n            }\n            else if (ramData >= 50) {\n                return (\n                    <div className=\"usage-over-50\">\n                        <p>과제를 하고있나요?</p>\n                    </div>\n                );\n            }\n            else if (ramData >= 30) {\n                return (\n                    <div className=\"usage-over-30\">\n                        <p >그렇게 많은 전기세는 안나오겠군요</p>\n                    </div>\n                );\n            }\n            else if (ramData >= 10) {\n                return (\n                    <div className=\"usage-over-10\">\n                        <p >쓰고있는건가요?</p>\n                    </div>\n                );\n            }\n            else {\n                return (\n                    <div className=\"usage-over-0\">\n                        <p >정보가 없네요</p>\n                    </div>\n                );\n            }\n        }\n\n        const GetCpuNotice = () => {\n            if (cpuData >= 90) {\n                return (\n                    <div className=\"usage-over-90\">\n                        <p >PC가 뜨겁습니다!</p>\n                    </div>\n                );\n            }\n            else if (cpuData >= 70) {\n                return (\n                    <div className=\"usage-over-70\">\n                        <p>누군가가 열심히 작업하고 있습니다</p>\n                    </div>\n                );\n            }\n            else if (cpuData >= 50) {\n                return (\n                    <div className=\"usage-over-50\">\n                        <p>과제를 하고있나요?</p>\n                    </div>\n                );\n            }\n            else if (cpuData >= 30) {\n                return (\n                    <div className=\"usage-over-30\">\n                        <p >그렇게 많은 전기세는 안나오겠군요</p>\n                    </div>\n                );\n            }\n            else if (cpuData >= 10) {\n                return (\n                    <div className=\"usage-over-10\">\n                        <p >쓰고있는건가요?</p>\n                    </div>\n                );\n            }\n            else {\n                return (\n                    <div className=\"usage-over-0\">\n                        <p >정보가 없네요</p>\n                    </div>\n                );\n            }\n        }\n\n        const getFilteredTime = (time) =>{\n            const nowTime = new String(time)\n            const nowSplitedTime = nowTime.split('-');\n            if(nowSplitedTime.length < 4)return \"정보가 없습니다\";\n            return (\n                nowSplitedTime[0] + \"년 \" +\n                nowSplitedTime[1] + \"월 \" +\n                nowSplitedTime[2] + \"일 \" +\n                nowSplitedTime[3] + \"시\" +\n                nowSplitedTime[4] + \"분 \"\n            );\n        }\n\n        const CollapseChild = () => {\n            return (\n                <Card>\n                    <CardBody>\n                        <div className=\"collapse-item-wrapper\">\n                            <div className=\"collapse-item-box\">\n                                <div className=\"info-text-box\">\n                                    <p>RAM 실시간 사용량</p>\n                                </div>\n                                <div className=\"value-text-box\">\n                                    <span >{ramData}%</span>\n                                </div>\n                                <div className=\"data-progress-box\">\n                                    <Progress value={ramData} />\n                                </div>\n                                <div><GetRamNotice /></div>\n                            </div>\n                        </div>\n\n                        <div className=\"collapse-item-wrapper\">\n                            <div className=\"collapse-item-box\">\n                                <div className=\"info-text-box\">\n                                    <p >CPU 실시간 사용량</p>\n                                </div>\n                                <div className=\"value-text-box\">\n                                    <span >{cpuData}%</span>\n                                </div>\n                                <div className=\"data-progress-box\">\n                                    <Progress value={cpuData} />\n                                </div>\n                                <div><GetCpuNotice /></div>\n                            </div>\n                        </div>\n\n                        <div className=\"collapse-item-wrapper\">\n                            <div className=\"collapse-item-box\">\n                                <div className=\"info-text-box\">\n                                    <p >PC 사용 시작 시간</p>\n                                </div>\n                                <div className=\"value-text-box\">\n                                    <span >{getFilteredTime(startTime)}</span>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div className=\"collapse-item-wrapper\">\n                            <div className=\"collapse-item-box\">\n                                <div className=\"info-text-box\">\n                                    <p >PC 사용 종료 시간</p>\n                                </div>\n                                <div className=\"value-text-box\">\n                                <span >{getFilteredTime(endTime)}</span>\n                                </div>\n                            </div>\n                        </div>\n                    <ButtonState/>\n                    </CardBody>\n                </Card>\n            );\n            if (powerStatus === \"ON\" || powerStatus === \"On\") {\n                return (\n                    <Card>\n                        <CardBody>\n                            <p>RAM : {ramData}</p>\n                            <Progress value={ramData} />\n\n                            <p>CPU : {cpuData}</p>\n                            <Progress value={cpuData} />\n                            <Button onClick={pcOffEvent(id)}>>OFF</Button>\n                            <Button onClick={toggle}>-</Button>\n\n                        </CardBody>\n                    </Card>\n                );\n            }\n            else {\n                return (\n                    <div className=\"pc-off-alert-box\">\n                        <Alert color=\"dark\">\n                            이 PC는 종료되었습니다.\n                         </Alert>\n                    </div>\n\n                );\n            }\n        }\n\n        return (\n            <React.Fragment>\n                <Row>\n                    <div className=\"pc-item-wrapper\">\n                        <Powerlight />\n                        <div onClick={toggle} className=\"id-box\">\n                            <p>\n                                <span className=\"id-span\">\n                                    {id}\n                                </span>\n                                <span className=\"update-log\">\n                                    UPDATED : {updateTime}\n                                </span>\n\n                            </p>\n                        </div>\n                        <Collapse isOpen={isOpen}>\n                            <CollapseChild />\n                        </Collapse>\n                    </div>\n                </Row>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default PcItem;","import React, { Component } from 'react';\nimport './ScrollButton.css';\nclass ScrollButton extends React.Component {\n    constructor() {\n      super();\n  \n      this.state = {\n          intervalId: 0\n      };\n    }\n    \n    scrollStep() {\n      if (window.pageYOffset === 0) {\n          clearInterval(this.state.intervalId);\n      }\n      window.scroll(0, window.pageYOffset - this.props.scrollStepInPx);\n    }\n    \n    scrollToTop() {\n      let intervalId = setInterval(this.scrollStep.bind(this), this.props.delayInMs);\n      this.setState({ intervalId: intervalId });\n    }\n    \n    render () {\n        return <button title='Back to top' className='scroll' \n                 onClick={ () => { this.scrollToTop(); }}>\n                  <span className='arrow-up glyphicon glyphicon-chevron-up'>\n                      TOP\n                  </span>\n                </button>;\n     }\n} \nexport default ScrollButton;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n// const useStyles = makeStyles((theme) => ({\n//     root: {\n//       '& > *': {\n//         margin: theme.spacing(1),\n//       },\n//     },\n//   }));\n  \nconst smallButtonStyle ={\n    height:\"30px\",\n};\nconst ClickableText = ({text,handlePolling}) =>{\n    return(\n        <React.Fragment>\n            <Button onClick={handlePolling} style={smallButtonStyle} size=\"small\" color=\"primary\">{text}</Button>\n        </React.Fragment>\n    );\n}\n\nexport default ClickableText;","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport PcItem from '../PcItem/PcItem'\nimport ScrollButton from '../ScrollButton/ScrollButton';\nimport { Container, Spinner, Alert } from 'reactstrap';\nimport './TotalPc.css'\nimport ClickableText from '../ClickableText/ClickableText';\nconst smallPaddingStyle = {\n    padding:\"5px\"\n}\n\nconst TotalPc = ({ isPolling ,handlePolling}) => {\n    const [pcs, setPcs] = useState(null);\n\n    const getPcs = () => {\n        axios.get(\"mobile/pc\")\n            .then((response) => {\n                // console.log(response);\n                // console.log(response.data.pcs);\n                var sortingField = \"powerStatus\";\n                const sortedResponse = response.data.pcs.sort((a,b)=>{\n                    return a[sortingField] - b[sortingField];\n                })\n                console.log(\"정렬된 response\");\n                console.log(sortedResponse);\n                setPcs(sortedResponse.map(({ powerStatus, ramData, cpuData, startTime, endTime, id }) =>\n                    (\n                        <PcItem\n                        key={id}\n                            id={id}\n                            powerStatus={powerStatus}\n                            ramData={ramData}\n                            cpuData={cpuData}\n                            endTime={endTime}\n                        />\n                    )));\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    useEffect(() => {\n        console.log(\"Total Pc Render!\");\n    })\n\n    useEffect(() => {\n        console.log(\"useEffect!\");\n        getPcs();\n    }, [1])\n\n    useEffect(() => {\n        if (isPolling) {\n            const intervals = setInterval(() => {\n                getPcs();\n            }, 5000);\n            return () => clearInterval(intervals);\n        }\n        else{\n            console.log(\"Polling is stopped\");\n        }\n    }, [isPolling])\n\n\n    const RenderPollingState = () =>{\n        if(isPolling){\n            return (\n                <Alert style={smallPaddingStyle} color=\"success\">\n                <div className=\"polling-state-wrapper\">\n                    <div className=\"text-box\">\n                    실시간 업데이트 중입니다\n                    </div>\n                    <div className=\"spinner-box\">\n                    <Spinner size=\"sm\" color=\"secondary\" />\n                    </div>\n                </div>\n                </Alert>\n\n            );\n        }\n        else{\n            return (\n                <Alert style={smallPaddingStyle} color=\"secondary\">\n                <div className=\"polling-state-wrapper\">\n                <div className=\"text-box\">\n                    실시간 업데이트가 중지되었습니다.\n                </div>\n                <div className=\"spinner-box\">\n                   <ClickableText handlePolling={handlePolling} text={\"다시켜기\"}/>\n                </div>\n            </div>\n            </Alert>\n\n            );\n        }\n    }\n\n    return (\n        <React.Fragment>\n                          <ScrollButton scrollStepInPx=\"50\" delayInMs=\"16.66\"/>\n\n            <Container>\n                <div>\n              \n                <RenderPollingState/>\n                </div>\n                <PcItem\n                    id={\"testId\"}\n                    key={\"testKey\"}\n                    powerStatus={\"ON\"}\n                    ramData={\"58.234\"}\n                    cpuData={\"34\"}\n                    startTime={\"2020-04-04-12-12\"}\n                    endTime={\"2020-04-04-13-13\"}\n                />\n             \n            </Container>\n            <Container>\n                {pcs}\n            </Container>\n        </React.Fragment>\n    );\n}\n\nexport default TotalPc;","import React, { useState } from 'react';\nimport { Container } from 'reactstrap';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport {Link, Redirect} from 'react-router-dom';\nimport './Login.css';\nconst Login = ({ saveLoginState, authenticated, location }) => {\n    const [id,setId] = useState('');\n    const [pw,setPw] = useState('');\n    const { from } = location.state || { from: { pathname: \"/\" } };\n    if (authenticated) return <Redirect to={from} />;\n    return (\n        <Container>\n            <div className=\"login-wrapper\">\n                <Container>\n                    <div className=\"header-box\">\n                        <p className=\"header\">SYSTEM MONITOR</p>\n                        <p className=\"copylight\">Developed By 22HOURS</p>\n                    </div>\n                    <div className=\"input-box\">\n                        <div className=\"id-box\">\n                            <div className=\"input-box-sizing\">\n                                <TextField\n                                    value={id}\n                                    onChange={({target:{value}})=>setId(value)}\n                                    size=\"small\"\n                                    id=\"outlined-basic\" label=\"ID\" variant=\"outlined\" />\n                            </div>\n                        </div>\n                        <div className=\"pw-box\">\n                            <div className=\"input-box-sizing\">\n                                <TextField\n                                    value={pw}\n                                    onChange={({target:{value}})=>setPw(value)}\n                                    size=\"small\"\n                                    id=\"outlined-basic\" label=\"PW\" variant=\"outlined\" />\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"submit-box\">\n                        <div className=\"button-box\">\n                            <Button \n                            onClick={()=>{\n                                if(id.length < 1) return;\n                                if(pw.length < 1) return;\n                                saveLoginState(id);\n                            }}\n                            variant=\"contained\" color=\"primary\">\n                                Login\n                            </Button>\n                        </div>\n                        <div className=\"help-box\">\n                            <Link>비밀번호를 잊으셨나요?</Link>\n                        </div>\n                    </div>\n\n                </Container>\n            </div>\n        </Container>\n    );\n}\n\nexport default Login;","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nfunction AuthRoute({authenticated,component: Component, render, ...rest }) {\n  return (\n    <Route\n    {...rest}\n    render={props =>\n      authenticated? (\n        render ? render(props) : <Component {...props} />\n      ) : (\n        <Redirect\n          to={{ pathname: '/login', state: { from: props.location } }}\n        />\n      )\n    }\n  />\n  );\n}\n\nexport default AuthRoute;","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Index from './component/Index/Index';\nimport Header from './component/Header/Header';\nimport One from './component/test/One';\nimport Two from './component/test/Two';\nimport TotalPc from './component/TotalPc/TotalPc';\nimport Login from './component/Login/Login';\nimport AuthRoute from './component/AuthRoute/AutheRoute';\nconst MyRouter = ({ saveLoginState, user, authenticated, isPolling, handlePolling }) => {\n    return (\n        <Router>\n            <Header isPolling={isPolling} handlePolling={handlePolling} ></Header>\n            <div className=\"main\">\n                <div className=\"main-wrapper\">\n                    <Switch>\n                        <Route\n                            path=\"/login\"\n                            render={props => (\n                                <Login authenticated={authenticated} saveLoginState={saveLoginState} {...props} />\n                            )}\n                        />\n                        <AuthRoute\n                            authenticated={authenticated}\n                            path=\"/\"\n                            render={props => <TotalPc user={user} isPolling={isPolling} handlePolling={handlePolling} {...props} />}\n                        />\n                        <Route path=\"/one\" component={One} />\n                        <Route path=\"/two\" component={Two} />\n                        {/* <Route  path=\"/total\"\n                  render={() =>\n                      <TotalPc isPolling={isPolling}  />\n                  }/> */}\n                    </Switch>\n                </div>\n            </div>\n        </Router>\n    );\n}\n\nexport default MyRouter;","import React, { Component } from 'react';\nimport { HashRouter , Route, Link} from 'react-router-dom';\nimport './App.css';\nimport MyRouter from './MyRouter';\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: 'null',\n      authenticated: false,\n      isPollin: false\n    }\n  }\n\n  componentDidMount() {\n    const sessionUser = window.sessionStorage.getItem('user');\n    const sessionAuth = window.sessionStorage.getItem('auth');\n    if (sessionUser) {\n      this.setState({\n        user: sessionUser,\n        authenticated: sessionAuth\n      })\n    }\n  }\n\n  render() {\n    const saveLoginState = (email) => {\n      this.setState({\n        user: email,\n        authenticated: true\n      })\n      window.sessionStorage.setItem('user', email);\n      window.sessionStorage.setItem('auth', true);\n    }\n    const logout = () => {\n      this.setState({\n        user : null,\n        authenticated :false\n      })\n      window.sessionStorage.clear();\n    }\n    const handlePolling = () => {\n      this.setState({\n        isPolling: !this.state.isPolling\n      })\n    };\n    return (\n      <HashRouter basename=\"/\">\n      <MyRouter\n        authenticated={this.state.authenticated} \n        saveLoginState={saveLoginState} \n        logout={logout}\n        isPolling={this.state.isPolling}\n        handlePolling={handlePolling} />\n        </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}